# Node class to represent a node in the linked list
class Node:
    def __init__(self, data):
        self.data = data  # Value of the node
        self.next = None  # Pointer to the next node


# LinkedList class to manage linked list operations
class LinkedList:
    def __init__(self):
        self.head = None  # Initialize the head of the list

    # Traverse the list
    def traverse(self): 
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

    # Insert at the end of the list
    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        last = self.head
        while last.next:
            last = last.next
        last.next = new_node

    # Insert at the beginning of the list
    def insert_at_beginning(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    # Delete a node by its value
    def delete_node(self, key):
        current = self.head

        # If head node itself holds the key to be deleted
        if current and current.data == key:
            self.head = current.next
            current = None
            return

        # Search for the key to be deleted
        prev = None
        while current and current.data != key:
            prev = current
            current = current.next

        # If the key was not present in the list
        if current is None:
            return

        # Unlink the node from the list
        prev.next = current.next
        current = None

    # Reverse the linked list
    def reverse(self):
        prev = None
        current = self.head
        while current:
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        self.head = prev

    # Detect cycle in the linked list
    def detect_cycle(self):
        slow = fast = self.head

        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

            # If slow and fast meet, there's a cycle
            if slow == fast:
                return True

        return False


# Example usage
if __name__ == "__main__":
    # Create a linked list
    ll = LinkedList()

    # Insert elements
    ll.append(10)
    ll.append(20)
    ll.append(30)
    ll.append(40)

    print("Original Linked List:")
    ll.traverse()

    # Insertion at the beginning
    ll.insert_at_beginning(5)
    print("\nAfter inserting 5 at the beginning:")
    ll.traverse()

    # Deletion of a node
    ll.delete_node(20)
    print("\nAfter deleting node with value 20:")
    ll.traverse()

    # Reverse the linked list
    ll.reverse()
    print("\nAfter reversing the linked list:")
    ll.traverse()

    # Cycle detection example
    # Creating a cycle for demonstration (40 -> 30)
    ll.head.next.next.next.next = ll.head.next
    print("\nCycle detected?" if ll.detect_cycle() else "\nNo cycle detected")
